name: "$(SourceBranchName)+$(BuildID)"

trigger: none
pr: none

resources:
  repositories:
    - repository: common
      type: github
      name: NHSDigital/api-management-utils
      ref: refs/heads/edge
      endpoint: NHSDigital

variables:
  - template: project.yml

jobs:
  - job: teardown
    displayName: PR Teardown
    timeoutInMinutes: 30
    pool:
      name: 'AWS-ECS'
      vmImage: 'ubuntu-latest'
    steps:
      - checkout: self

      - bash: |
          PR_NUMBER=$(echo "$(Build.SourceBranch)" | grep -o "[0-9]\+")
          if [ -z $PR_NUMBER ]
            then
              PR_NUMBER=$(echo "$BUILD_SOURCEVERSIONMESSAGE" | grep -o "#[0-9]\+" | grep -o "[0-9]\+")
          fi
          SERVICE_BASE_PATH="gp-connect-access-record-fhir-pr-$PR_NUMBER"
          echo "$SERVICE_BASE_PATH"
          echo "##vso[task.setvariable variable=SERVICE_BASE_PATH]$SERVICE_BASE_PATH"
        displayName: Export Service Name

      - template: "azure/components/aws-assume-role.yml@common"
        parameters:
            role: "auto-ops"
            profile: "apim-dev"
            aws_account: "dev"

      - bash: |
          echo "##vso[task.setvariable variable=AWS_DEFAULT_REGION]eu-west-2"
        displayName: Set AWS default region

#      - template: "azure/common/deploy-stage.yml@common"
#        parameters:
#          ${{ if eq(parameters.proxy_path, 'live')}}:
#            fully_qualified_service_name: ${{ parameters.service_name }}-${{ parameters.pr_label }}
#          ${{ if ne(parameters.proxy_path, 'live')}}:
#            fully_qualified_service_name: ${{ parameters.service_name }}-${{ parameters.pr_label }}-${{ parameters.proxy_path }}
#          service_base_path: ${{ parameters.service_base_path }}-${{ parameters.pr_label }}
#          notify: true
#          ${{ each param in parameters }}:
#            ${{ if notIn(param.key, 'deploy_review_sandbox', 'fully_qualified_service_name', 'service_base_path', 'manual_approval_env') }}:
#              ${{ param.key }}: ${{ param.value }}

      - bash: |
          cd terraform
          export AWS_PROFILE=apim-dev
          account_id="$(aws sts get-caller-identity --query Account --output text)"
          tag="$(Build.SourceVersion)"
          if terraform workspace select ${tag:0:5}
            then
              terraform destroy
              terraform workspace select default && terraform workspace delete ${tag:0:5}
            else
              echo "No terraform workspace found for ${tag:0:5}"
              exit 1
          fi
#        workingDirectory: $(Pipeline.Workspace)/s/$(SERVICE_NAME)/$(SERVICE_ARTIFACT_NAME)
        displayName: Destroy terraform PR workspace and linked resources

      - bash: |
          export APIGEE_ENVIRONMENT="$(ENVIRONMENT)"
          export APIGEE_ACCESS_TOKEN="$(secret.AccessToken)"

          make delete-kvm-entry
        workingDirectory: "$(Pipeline.Workspace)/s/$(SERVICE_NAME)/$(SERVICE_ARTIFACT_NAME)"
        displayName: Delete the PR entry from the KVM
