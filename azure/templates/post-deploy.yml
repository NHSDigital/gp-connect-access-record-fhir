parameters:
  - name: aws_dev
    default: aws --profile=apim-dev

steps:
  - bash: |
      make install-python

    workingDirectory: $(Pipeline.Workspace)/s/$(SERVICE_NAME)/$(SERVICE_ARTIFACT_NAME)
    displayName: Setup pytests
    condition: always()

  - bash: |
      name=$(FULLY_QUALIFIED_SERVICE_NAME)
      workspace=$(echo $name | grep -oE '[0-9]+$')
      
      isItPR=0
      if [ -z ${workspace} ]; then
          workspace=$APIGEE_ENVIRONMENT
      else
          isItPR=1
          workspace=pr-${workspace}
      fi
      
      echo Workspace name is ${workspace}
      echo "##vso[task.setvariable variable=IS_IT_PR]${isItPR}"
      echo "##vso[task.setvariable variable=WORKSPACE]${workspace}"
      myName = 'LiamF'
      echo "##vso[task.setvariable variable=myName;isoutput=true]${myName}"
      echo "Liam"

      echo "##vso[task.setvariable variable=one]secondValue"
    displayName: Set workspace

  - bash: |
      echo ${{ variables.WORKSPACE }}
      echo $(WORKSPACE)
      echo $(variables.myName)
      echo ${{ variables.service_base_path }}
      echo "hi"
      echo $(FULLY_QUALIFIED_SERVICE_NAME)
      echo $(one)
      echo $(System.PullRequest.PullRequestId)
      echo $(System.PullRequest.PullRequestNumber)
      echo $env:System_PullRequest_PullRequestId
      echo $env:System_PullRequest_PullRequestNumber
      echo $(Build.BuildId)

    displayName: TEST $(Build.BuildId) and $(Build.BuildNumber) and $(Build.DefinitionName) and $(Build.DefinitionVersion) and $(Build.SourceBranchName) and $(Build.SourceVersion) and $(System.DefinitionId) and $(System.DefinitionVersion) and $(System.PullRequest.PullRequestId) and $(System.PullRequest.PullRequestNumber) and $env:System_PullRequest_PullRequestId

  - template: "azure/components/aws-assume-role.yml@common"
    parameters:
      role: "auto-ops"
      profile: "apim-dev"
      aws_account: "dev"

  - bash: |
      set -e
      if ! [[ $APIGEE_ENVIRONMENT =~ .*-*sandbox ]]; then
        export AWS_PROFILE=apim-dev
        account_id="$(aws sts get-caller-identity --query Account --output text)"
        aws ecr get-login-password --region eu-west-2 | docker login --username AWS --password-stdin ${account_id}.dkr.ecr.eu-west-2.amazonaws.com
      
        mock_provider_repository_url=${account_id}.dkr.ecr.eu-west-2.amazonaws.com/gpconnect-infra-dev
        image_tag=${mock_provider_repository_url}:$(WORKSPACE)
      
        docker build -t ${image_tag} .
        docker tag ${image_tag} ${mock_provider_repository_url}:$(Build.BuildId)
        docker push -a ${mock_provider_repository_url}
      fi
    displayName: Build and push mock-receiver image
    workingDirectory: "$(Pipeline.Workspace)/s/$(SERVICE_NAME)/$(SERVICE_ARTIFACT_NAME)/PrismMockProvider"

  - bash: |
      set -e
      if ! [[ $APIGEE_ENVIRONMENT =~ .*-*sandbox ]]; then
          export AWS_PROFILE=apim-dev
          aws_account_no="$(aws sts get-caller-identity --query Account --output text)"
      
          make init
          make apply aws_account_no=${aws_account_no} environment=$(WORKSPACE)
      fi
    displayName: Run Terraform
    workingDirectory: "$(Pipeline.Workspace)/s/$(SERVICE_NAME)/$(SERVICE_ARTIFACT_NAME)/terraform"
    retryCountOnTaskFailure: 2

  - bash: |
      set -e
      if ! [[ $APIGEE_ENVIRONMENT =~ .*-*sandbox ]]; then
          if [ $(IS_IT_PR) -eq 1 ]; then
              #if its not sandbox and it should be PR
              make add-endpoint environment=$(WORKSPACE)
              cd ..
              export APIGEE_ENVIRONMENT="$(ENVIRONMENT)"
              export APIGEE_ACCESS_TOKEN="$(secret.AccessToken)"
              make create-kvm
          fi
      fi
    displayName: Update endpoints KVM
    workingDirectory: "$(Pipeline.Workspace)/s/$(SERVICE_NAME)/$(SERVICE_ARTIFACT_NAME)/terraform"

  - bash: |
      set -e
      export RELEASE_RELEASEID=$(Build.BuildId)
      export SOURCE_COMMIT_ID=$(Build.SourceVersion)
      export APIGEE_ENVIRONMENT="$(ENVIRONMENT)"
      export SERVICE_BASE_PATH="$(SERVICE_BASE_PATH)"
      export APIGEE_ACCESS_TOKEN="$(secret.AccessToken)"
      export PROXY_NAME="$(FULLY_QUALIFIED_SERVICE_NAME)"
      export STATUS_ENDPOINT_API_KEY="$(status-endpoint-api-key)"


      if [[ $APIGEE_ENVIRONMENT =~ .*-*sandbox ]]
      then
       poetry run pytest -v -m "not nhsd_apim_authorization" --api-name=gp-connect-access-record-fhir --proxy-name=$PROXY_NAME -o junit_logging=all --junitxml=test-report.xml

      else
       export INTERACTION_ID="$(WORKSPACE)"
       poetry run pytest -v --api-name=gp-connect-access-record-fhir --proxy-name=$PROXY_NAME -o junit_logging=all --junitxml=test-report.xml
      fi
    workingDirectory: "$(Pipeline.Workspace)/s/$(SERVICE_NAME)/$(SERVICE_ARTIFACT_NAME)/tests"
    displayName: Run full test suite

  - task: PublishTestResults@2
    displayName: 'Publish test results'
    condition: always()
    inputs:
      testResultsFiles: '$(Pipeline.Workspace)/s/$(SERVICE_NAME)/$(SERVICE_ARTIFACT_NAME)/tests/test-report.xml'
      failTaskOnFailedTests: true
